\import Function
\import Paths.Meta
\import Utils
\import lect01 (+)
\import lect04 (+-comm,+')
\import lect05 (Nat-elim, Nat-rec, funExt, v++-assoc)

-- 1. Определите факториал через Nat-rec.

\func fact (n : Nat) : Nat => Nat-rec Nat 1 (\lam n m => (suc n) * m) n

-- 2. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +C (n m k : Nat) : n +' m +' k = n +' (m +' k) =>
  Nat-elim
      (\lam k => n +' m +' k = n +' (m +' k))
      idp
      (\lam k IHk => pmap suc IHk)
      k


-- 3. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

{-
(P : Nat -> \Type)
               (z : P zero)
               (s : \Pi (n : Nat) -> P n -> P (suc n))
               (x : Nat)
- -}

\func D-elim
  (P : D -> \Type)
  (c1 : \Pi (n : Nat) -> P (con1 n))
  (c2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
  (c3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
  (d : D) : P d \elim d
  | con1 n => c1 n
  | con2 d1 d2 => c2 _ _ (D-elim P c1 c2 c3 d1) (D-elim P c1 c2 c3 d2)
  | con3 _x => c3 _ (\lam n => D-elim P c1 c2 c3 (_x n))

\func D-rec
  (P : \Type)
  (c1 : \Pi (n : Nat) -> P)
  (c2 : D -> D -> P -> P -> P)
  (c3 : \Pi (f : Nat -> D) -> (Nat -> P) -> P)
  (d : D) : P => D-elim (\lam _ => P) c1 c2 c3 d

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}

\func foo (d : D) : Nat =>
  D-rec Nat (\lam n => n) (\lam d1 d2 food1 food2 => food1 + food2) (\lam g foog => foog (foog 100)) d

-- 4. Определите рекурсор и элиминатор для List.

\func List-elim {A : \Type}
  (P : List A -> \Type)
  (c1 : P nil)
  (c2 : \Pi (a : A) (l : List A) -> P l -> P (a :: l))
  (l : List A) : P l \elim l
  | nil => c1
  | :: a l => c2 a l (List-elim P c1 c2 l)

-- 5. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp


-- Optional:
-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (\lam a' p => B a a' p) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
  => (Jalt (\lam a a' _ => B a -> B a') (\lam _ => id) p) b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p \elim p
  | (x,p) => Jalt (\lam a a' p => (a, idp) = {\Sigma (x : A) (a = x)} (a', p)) (\lam _ => idp) p

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => \case (sigma-contr (a', p)) \with {
  | p1 => transport'' (\lam (x : \Sigma (x : A) (a = x)) => B x.1 x.2) p1 b
}

-- 7. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func notNotId : (\lam x => not (not x)) = (\lam x => x) =>
  funExt (\lam _ => Bool) (\lam x => \case \elim  x \with {
    | true => idp
    | false => idp
  } )

-- 8. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => \case pmap (\lam x => x 1) p
-- 9. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right => coe (\lam i => left = i) idp right

-- 10. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b')
  => path (\lam i => (p @ i, q @ i))

-- 11. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1
  => path (\lam i => (t @ i).1)

-- 12. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b'
  => path (\lam i => f (p @ i) (q @ i))


-- 13. Мы видели как определить transport через coe. Определите частный случай coe через transport.

\func coe0 (A : I -> \Type) (a : A left) : A right =>
  transport (\lam a => A a) left=right a

-- 14. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left =>
  transport (\lam a => B a) (sym left=right) b

-- 15. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a xs => v++-assoc.transport-vcons _ (xs v++ vnil) (+-comm 0 n) *> (pmap (vcons a) (vnil-rightId xs))
  \where {
    \func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m +' n) \elim n, xs
      | 0, vnil => ys
      | suc n, vcons x xs => vcons x (xs v++ ys)
  }
