\import Algebra.Meta
\import Data.Bool
\import Data.List
\import Function
\import Function.Meta
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import Utils (Maybe, just, maybe, nothing)
\import hw07
\import lect02 (Empty)
\import lect07(Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.

\func termMap-o {A B C : \Set} {f : A -> B} {g : B -> C} {m : Term A} :
  termMap g (termMap f m) = termMap (\lam x => g (f x)) m => {?}


\func termMap>>= {A B C : \Set} (f : A -> B) (m : Term A) {g : B -> Term C} :
  termMap f m  TermMonad.>>= g = m  TermMonad.>>= g o f \elim m
  | var v => idp
  | unit => idp
  | app m1 m2 => rewrite (termMap>>= _ m1, termMap>>= _ m2) idp
  | lam m => run {
    pmap lam, (termMap>>= (maybe nothing (\lam x => just (f x))) m {liftM g}) *>, cong, ext,
    \case  \elim  __ \with {
      | nothing => idp
      | just a => idp
    }
  }

\func >>=termMap {A B C : \Set} (f : B -> C) (m : Term A) {g : A -> Term B} :
  m TermMonad.>>= (\lam a => termMap f (g a)) = termMap f (m TermMonad.>>= g) \elim m
  | var v => idp
  | unit => idp
  | app m1 m2 => rewrite (>>=termMap _ m1, >>=termMap _ m2) idp
  | lam m => run {
    pmap lam, inv,
    (inv (>>=termMap (maybe nothing (\lam x => just (f x))) m {liftM g})) *>,
    cong, ext, \case \elim __ \with {
      | nothing => idp
      | just a => repeat (rewrite termMap-o) idp
    }

  }

\func maybe-o-just {A B : \Set} (f : A -> B) (b : B) : maybe b f o just = f =>
  ext (\lam x => idp)

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left _ _ => idp
  | return-right {A : \Set} (m : Term A) : (m TermMonad.>>= var) = m \elim m {
    | var v => idp
    | unit => idp
    | app m1 m2 => cong (return-right m1) (return-right m2)
    | lam m => \let aux : liftM (var {A}) = var => ext (\lam x => cases x idp) \in rewrite (aux, return-right) idp  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C) :
     m TermMonad.>>= k TermMonad.>>= l = m TermMonad.>>= (\lam x => k x TermMonad.>>= l) \elim m {
    | var v => idp
    | unit => idp
    | app m1 m2 => rewrite (>>=-assoc m1 k l, >>=-assoc m2 k l) idp
    | lam m => run {
      pmap lam, (>>=-assoc m _ _) *>, cong, ext, \case \elim __ \with {
        | nothing => idp
        | just a => run {
          rewrite (termMap>>= just _),
          unfold liftM,
          rewrite (maybe-o-just (\lam a => termMap just (l a))),
          >>=termMap _ _ }
        }
      }
    }


-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func isLam {V : \Set} (t : Term V) : Bool
  | lam t1 => true
  | _ => false


\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam (t, p) => \case p)
  | unit => no (\lam (t, p) => \case p)
  | app t1 t2 => cases (isLam t1 arg addPath) \with {
    | false, nl =>  \case strategy t1, strategy t2 \with {
      | yes (s, r), _ => yes (app s t2, redAppLeft r idp)
      | no _, yes (s, r) => yes (app t1 s, redAppRight idp r)
      | no n1, no n2 => no (\lam p => \case p \with {
        | (s,r) => \case \elim s, \elim r \with {
          | s, redBeta t q => \case rewrite t nl
          | app s s1, redAppLeft r p1 => n1 (s, r)
          | app s s1, redAppRight p1 r => n2 (s1, r)
        }
      })
    }
    | true, nl => cases (t1, nl) \with {
      | lam t3, nl1 => yes (_, redBeta idp idp)
    }
  }
  | lam t1 => \case strategy t1 \with {
    | yes (s, r) => yes (lam s, redLam r)
    | no n => no (\lam p => \case p \with {
      | (s,r) => cases (s, r) \with {
        | lam s1, redLam r1 => n (s1, r1)
      }
    })
  }


-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc a => acc (\lam t' r => appAccLeft (a (app t' s) (redAppLeft r idp)))

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc a => acc (\lam t' r => appAccRight (a (app t t') (redAppRight idp r)))

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc a => acc  (\lam t' r => subLamAcc (a (lam t') (redLam r)))

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func hasType_ctx {V U : \Set} {f : V -> U} {ctx : V -> Type} {a : Term V} {T : Type} (h : hasType ctx a T)
  (ctx' : U -> Type) (ctxE : \Pi (x : V) -> ctx' (f x) = ctx x) :
  hasType ctx' (termMap f a) T \elim a, T, h
  | var v, T, varType idp => varType (ctxE _)
  | unit, Unit, unitType => unitType
  | app a a1, T, appType h1 h2 => appType (hasType_ctx h1 _ ctxE) (hasType_ctx h2 _ ctxE)
  | lam a, Arr T T1, lamType h => lamType (hasType_ctx h _ (\case \elim  __ \with {
    | nothing => idp
    | just a1 => ctxE _
  }))


\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b, B, h
  | var v, B, varType idp => h' v
  | unit, Unit, unitType => unitType
  | app b b1, B, appType h1 h2 => appType (substLem _ _ _ h1 _ _ h') (substLem _ _ _ h2 _ _ h')
  | lam b, Arr B B1, lamType h => lamType (substLem _ _ _ h _ _ (
    \case \elim __ \with {
      | nothing => varType idp
      | just u => hasType_ctx (h' u) _ (\lam _ => idp)
    }))

\func substLem1 {V : \Set} {b : Term (Maybe V)} {A B : Type}
                {ctx : V -> Type} {a : Term V} (a_Type : hasType ctx a A) (h : hasType (maybe A ctx) b B)
  : hasType ctx (b >>= (maybe a var)) B
  => substLem (maybe A ctx) b B h ctx (maybe a var) (\case \elim __ \with {
    | nothing => a_Type
    | just a1 => varType idp
  })

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func red1Lem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, a', r, A, h
  | app a a1, a', redBeta idp p, A1, appType (lamType h1) h2 => rewriteI p (substLem1 h2 h1)
  | app a a1, app a' a'1, redAppLeft r idp , A1, appType h1 h2 => appType (red1Lem r h1) h2
  | app a a1, app a' a'1, redAppRight idp r, A1, appType h1 h2 => appType h1 (red1Lem r h2)
  | lam a, lam a', redLam r1, Arr A1 A2, lamType h1 => lamType (red1Lem r1 h1)

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim r
  | Rr idp => h
  | Pt z r r1 => redLem r1 (red1Lem r h)

-- Optional
-- 7. Докажите typeableInterp из лекции