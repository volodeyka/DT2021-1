\import Logic (inP)
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths (inv)
\import Paths.Meta
\import Utils
\import lect12 \hiding (Int, pos, neg)
\import hw07 (contrProp)

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | pos (suc n) => pos (suc n)
  | pos 0       => neg 1
  | neg (suc n) => neg (suc (suc n))

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim x, y
  | pos n, pos m => pos (n Nat.+ m)
  | pos n, neg m => n Nat.- m
  | neg n, pos m => m Nat.- n
  | neg n, neg m => neg (n Nat.+ m)

\func \infixl 7 * (x y : Int) : Int \elim x, y
  | pos n, pos m => pos (n Nat.* m)
  | pos n, neg m => neg (n Nat.* m)
  | neg (suc n), pos m => neg ((suc n) Nat.* m)
  | neg (suc n), neg m => pos ((suc n) Nat.* m)

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | O
  | m2 Nat \with {
    | 0 => O
  }
  | m2p1 Nat
-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => inP (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \case (p 0) \with {
  | inP (a, ())
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \case q __ \with {
    | inP (a, r) => \case p a \with {
      | inP (c, s) => inP (c, unfold (o) (rewrite (s, r) idp))
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g =>
  \case p __ \with {
    | inP (a, q) => inP (f a, q)
  }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\func Set (A : \Set) : \Set => \Sigma (f : A -> \Prop) (∃ (s : Array A) (\Pi (a : A) -> f a <-> ∃ (n : _) (s n = a)))

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (=, \lam x y p => rewrite (pmap (__ y) p) idp)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty =>
    \let g  : Subs A => \lam a => Not (f a a)
    \in \case p g \with {
      | inP (a, q) =>
        contrProp {g a}
            (unfold g (rewrite {1} q (\lam x => x)))
            (\lam x => (rewriteI q at x) x)
    }

-- 9. Докажите, что in~ является сюръекцией.

\func in~-sur {A : \Type} {R : A -> A -> \Type} : isSur (in~ {A} {R})
  => \lam b => \case \elim b \with {
    | in~ a => inP (a, idp)
  }

-- Optional
-- 10. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
